---
import { translations } from '../stores/translation';
const currentLang = Astro.cookies.get('selectedLang')?.value || 'en';
const t = translations[currentLang as keyof typeof translations];

const getNavPositions = (lang: 'en' | 'id') => {
  const baseOffset = 45;
  const gaps = {
    en: [0, 7, 9, 9, 10], 
    id: [0, 9, 12, 8, 7]
  };

  return [
    { path: '/', name: t.nav.home, position: `${baseOffset}%` },
    { path: '/about', name: t.nav.about, position: `${baseOffset + gaps[lang][1]}%` },
    { path: '/product', name: t.nav.products, position: `${baseOffset + gaps[lang][1] + gaps[lang][2]}%` },
    { path: '/customer', name: t.nav.customers, position: `${baseOffset + gaps[lang][1] + gaps[lang][2] + gaps[lang][3]}%` },
    { path: '/contact', name: t.nav.contact, position: `${baseOffset + gaps[lang][1] + gaps[lang][2] + gaps[lang][3] + gaps[lang][4]}%` }
  ];
};

const navItems = getNavPositions(currentLang as 'en' | 'id');

const languageNames = {
  id: "Bahasa Indonesia",
  en: "English"
};
---

<header class="w-full h-[60px] sm:h-[80px] md:h-[100px] fixed top-0 left-0 right-0 bg-white z-50 overflow-hidden font-inter">
  <!-- Background containers -->
  <div class="absolute inset-0">
    <!-- White section - full width on mobile -->
    <div class="absolute top-0 left-0 h-[60px] sm:h-[80px] md:h-[100px] w-full lg:w-[39%] bg-white">
      <div class="absolute top-0 right-[-50px] h-[100px] w-[100px] bg-white transform origin-top-right -skew-x-[20deg] hidden lg:block"></div>
    </div>
    <!-- Navy blue section - hidden on mobile -->
    <div class="absolute top-0 right-0 h-[60px] sm:h-[80px] md:h-[100px] w-[61%] bg-primary-1 hidden lg:block">
      <div class="absolute top-0 left-[-50px] h-[100px] w-[100px] bg-primary-1 transform origin-top-left skew-x-[20deg]"></div>
    </div>
  </div>

  <!-- Main content container -->
  <div class="max-w mx-auto px-[5%] h-full relative">
    <!-- Logo and company name -->
    <div class="absolute top-1/2 -translate-y-1/2 flex items-center gap z-20">
      <img 
        src="/images/logo/Color.png" 
        alt="Company Logo" 
        class="h-10 md:h-20 w-auto"
      />
      <h3 class="text-body1 sm:text-h5 md:text-h4 text-primary-1 whitespace-nowrap">
        PT GLOBAL NIAGA SAKTI
      </h3>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden lg:block h-full">
      {navItems.map(item => (
        <a 
          href={item.path} 
          class="absolute top-1/2 -translate-y-1/2 text-body1 text-white hover:text-primary-2 transition-colors whitespace-nowrap z-20"
          style={`left: ${item.position}`}
        >
          {item.name}
        </a>
      ))}

      <!-- Language Selector -->
      <div 
        class="absolute top-1/2 -translate-y-1/2"
        style="right: 5%; z-index: 9999;"
        id="languageSelector"
      >
        <button 
          class="h-[40px] w-[75px] px-5 bg-white rounded-md flex items-center justify-between text-body3 sm:text-body1 md:text-h5 text-primary-1 relative"
          id="languageButton"
        >
          <span id="selectedLang">EN</span>
          <svg 
            class="w-4 h-4 transition-transform"
            id="langArrow"
            viewBox="0 0 21 24" 
            fill="none" 
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>
      </div>

      <!-- Moved dropdown outside header for better positioning -->
      <div 
        class="fixed hidden w-[205px]"
        id="langDropdown"
        style="z-index: 99999;"
      >
        <div class="bg-primary-2 rounded-lg shadow-xl">
          <button 
            class="w-full px-3 py-0.5 text-left text-body3 sm:text-body1 text-white hover:bg-primary-2/80 transition-colors group"
            data-lang="id"
          >
            <span class="group-data-[selected=true]:underline">{languageNames.id}</span>
          </button>
          <div class="w-full h-[1px] bg-white/20"></div>
          <button 
            class="w-full px-3 py-0.5 text-left text-body3 sm:text-body1 text-white hover:bg-primary-2/80 transition-colors group"
            data-lang="en"
          >
            <span class="group-data-[selected=true]:underline">{languageNames.en}</span>
          </button>
        </div>
      </div>
    </nav>

    <!-- Mobile Navigation Button -->
    <button 
      class="lg:hidden absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-lg bg-primary-1 text-white z-20"
      id="mobileMenuButton"
      aria-label="Toggle menu"
    >
      <svg 
        class="w-6 h-6" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M4 6h16M4 12h16M4 18h16"
        />
      </svg>
    </button>

    <div 
      class="lg:hidden fixed top-0 right-0 w-1/3 h-full bg-primary-1 z-50 transform translate-x-full transition-transform duration-300 ease-in-out shadow-lg"
      id="mobileMenu"
    >
    <!-- Close button -->
    <button 
      class="absolute top-4 right-4 p-2 text-white"
      id="closeMenuButton"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>

    <div class="flex flex-col items-start justify-center h-full pl-6">
      <div class="flex flex-col space-y-4 w-full">
        {navItems.map(item => (
          <a 
            href={item.path} 
            class="text-body3 sm:text-body1 md:text-h5 text-white hover:text-primary-2 transition-colors w-full"
          >
            {item.name}
          </a>
        ))}
      </div>
      
      <!-- Update the Mobile Language Selector section -->
    <div class="w-full pr-6 mt-4">
      <div class="relative inline-block w-[85px]">
        <button 
          class="w-full px-2 py-2 bg-white rounded-md flex items-center justify-between text-body3 text-primary-1"
          id="mobileLangButton"
        >
          <span id="selectedMobileLang">EN</span>
          <svg 
            class="w-4 h-4 transition-transform"
            id="mobileLangArrow"
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <!-- Mobile Language Dropdown - Move outside the button container -->
        <div 
          class="hidden absolute top-full left-0 mt-1 w-[85px] bg-primary-2 rounded-lg shadow-xl"
          id="mobileLangDropdown"
          style="z-index: 99999;"
        >
          <button 
            class="w-full px-2 py-2 text-left text-body3 text-white hover:bg-primary-2/80 transition-colors"
            data-mobile-lang="id"
          >
            {languageNames.id}
          </button>
          <div class="w-full h-[1px] bg-white/20"></div>
          <button 
            class="w-full px-2 py-2 text-left text-body3 text-white hover:bg-primary-2/80 transition-colors"
            data-mobile-lang="en"
          >
            {languageNames.en}
          </button>
        </div>
      </div>
    </div>
    </div>
  </div>

  <!-- Backdrop -->
  <div 
    class="lg:hidden fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300"
    id="menuBackdrop"
  ></div>
  <!-- Horizontal separator line -->
  <div class="absolute bottom-0 left-0 w-full h-[1px] bg-primary-1 shadow-md z-30"></div>
</header>

<div class="h-[60px] sm:h-[80px] md:h-[100px]"></div>

<script>
  import { setLanguage, getLanguage } from '../stores/language';
  
  // Get DOM elements
  const elements = {
    desktop: {
      button: document.getElementById('languageButton'),
      dropdown: document.getElementById('langDropdown'),
      arrow: document.getElementById('langArrow'),
      selected: document.getElementById('selectedLang'),
      buttons: document.querySelectorAll('[data-lang]')
    },
    mobile: {
      button: document.getElementById('mobileLangButton'),
      dropdown: document.getElementById('mobileLangDropdown'), 
      arrow: document.getElementById('mobileLangArrow'),
      selected: document.getElementById('selectedMobileLang'),
      buttons: document.querySelectorAll('[data-mobile-lang]')
    },
    menu: {
      button: document.getElementById('mobileMenuButton'),
      close: document.getElementById('closeMenuButton'),
      menu: document.getElementById('mobileMenu'),
      backdrop: document.getElementById('menuBackdrop'),
      items: document.getElementById('mobileMenu')?.querySelectorAll('a')
    }
  };

  // Initialize language state
  const currentLang = getLanguage();
  const langDisplay = currentLang.toUpperCase();
  elements.desktop.selected!.textContent = langDisplay;
  elements.mobile.selected!.textContent = langDisplay;

  // Language switching functions
  function switchLanguage(lang: string) {
    if (lang && (lang === 'en' || lang === 'id')) {
      setLanguage(lang);
      const display = lang.toUpperCase();
      elements.desktop.selected!.textContent = display;
      elements.mobile.selected!.textContent = display;
      location.reload();
    }
  }

  // Desktop language dropdown
  let isDesktopOpen = false;

  function updateDropdownPosition() {
    if (elements.desktop.button && elements.desktop.dropdown) {
      const rect = elements.desktop.button.getBoundingClientRect();
      elements.desktop.dropdown.style.top = `${rect.bottom + 8}px`;
      elements.desktop.dropdown.style.right = '5%';
    }
  }

  elements.desktop.button?.addEventListener('click', (e) => {
    e.stopPropagation();
    isDesktopOpen = !isDesktopOpen;
    elements.desktop.dropdown?.classList.toggle('hidden', !isDesktopOpen);
    elements.desktop.arrow?.classList.toggle('rotate-180', isDesktopOpen);
    if (isDesktopOpen) updateDropdownPosition();
  });

  elements.desktop.buttons.forEach(button => {
    button.addEventListener('click', (e) => {
      const lang = (e.currentTarget as HTMLButtonElement).dataset.lang?.toLowerCase();
      switchLanguage(lang || 'en');
    });
  });

  // Mobile menu and language handling
  let isMobileMenuOpen = false;
  let isMobileLangOpen = false;

  function handleMobileMenu(open: boolean) {
    isMobileMenuOpen = open;
    elements.menu.menu?.classList.toggle('translate-x-full', !open);
    elements.menu.backdrop?.classList.toggle('hidden', !open);
    document.body.style.overflow = open ? 'hidden' : '';
    if (!open) handleMobileLang(false);
  }

  function handleMobileLang(open: boolean) {
    isMobileLangOpen = open;
    const dropdown = elements.mobile.dropdown;
    const arrow = elements.mobile.arrow;
    
    if (dropdown && arrow) {
      if (open) {
        dropdown.classList.remove('hidden');
        arrow.classList.add('rotate-180');
      } else {
        dropdown.classList.add('hidden');
        arrow.classList.remove('rotate-180');
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    handleMobileLang(false);
  });

  // Ensure dropdown is hidden on initialization
  window.addEventListener('load', () => {
    elements.mobile.dropdown?.classList.add('hidden');
    elements.mobile.arrow?.classList.remove('rotate-180');
  });

  elements.menu.button?.addEventListener('click', () => handleMobileMenu(true));
  elements.menu.close?.addEventListener('click', () => handleMobileMenu(false));
  elements.menu.backdrop?.addEventListener('click', () => handleMobileMenu(false));
  
  elements.mobile.button?.addEventListener('click', (e) => {
    e.stopPropagation();
    handleMobileLang(!isMobileLangOpen);
  });

  elements.mobile.buttons.forEach(button => {
    button.addEventListener('click', (e) => {
      const lang = (e.currentTarget as HTMLButtonElement).dataset.mobileLang?.toLowerCase();
      switchLanguage(lang || 'en');
    });
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as Node;
    const button = elements.mobile.button;
    const dropdown = elements.mobile.dropdown;
    
    if (isMobileLangOpen && button && dropdown && !button.contains(target) && !dropdown.contains(target)) {
      handleMobileLang(false);
    }
  });

  // Update dropdown position on scroll/resize
  ['scroll', 'resize'].forEach(event => {
    window.addEventListener(event, () => {
      if (isDesktopOpen) updateDropdownPosition();
    });
  });

  // Close menu when clicking menu items
  elements.menu.items?.forEach(item => {
    item.addEventListener('click', () => handleMobileMenu(false));
  });
</script>